{"name":"Lambda-resort","tagline":"examples of filtering, sorting, mapping by Java, Groovy, Scala, Kotlin, Xtend, Ceylon","body":"\r\n# Filtering, sorting, mapping\r\n\r\n### Backgrounds\r\n[Guest.java](src/main/java/com/naver/helloworld/resort/domain/Guest.java)\r\n\r\n```java\r\npublic class Guest {\r\n\tprivate final int grade;\r\n\tprivate final String name;\r\n\tprivate final String company;\r\n...\r\n}\r\n```\r\n\r\n[GuestRepository.java](src/main/java/com/naver/helloworld/resort/repository/GuestRepository.java)\r\n\r\n```java\r\nimport java.util.List;\r\n\r\npublic interface GuestRepository {\r\n\tpublic List<Guest> findAllGuest ();\r\n}\r\n```\r\n\r\n[ResortService.java](src/main/java/com/naver/helloworld/resort/service/ResortService.java)\r\n\r\n```java\r\npublic interface ResortService {\r\n\tpublic List<String> findGuestNamesByCompany (String company);\r\n}\r\n```\r\n\r\n## Implementations by classic Java\r\n### JDK Collections framework\r\n[ClassicJavaResort.java](src/main/java/com/naver/helloworld/resort/service/ClassicJavaResort.java)\r\n\r\n```java\r\npublic List<String> findGuestNamesbyCompany(String company) {\r\n\tList<Guest> all = repository.findAllGuest();\r\n\r\n\tList<Guest> filtered = filter(guests, company);\r\n\tsort(filtered);\r\n\treturn mapNames(filtered);\r\n}\r\n\r\nprivate List<Guest> filter(List<Guest> guests, String company) {\r\n\tList<Guest> filtered = new  ArrayList<>();\r\n\tfor(Guest guest : guests ) {\r\n\t\tif (company.equals(guest.getCompany())) {\r\n\t\t\tfiltered.add(guest);\r\n\t\t}\r\n\t}\r\n\treturn filtered;\r\n}\r\n\r\nprivate void sort(List<Guest> guests) {\r\n\tCollections.sort(guests, new Comparator<Guest>() {\r\n\t\tpublic int compare(Guest o1, Guest o2) {\r\n\t\t\treturn Integer.compare(o1.getGrade(), o2.getGrade());\r\n\t\t}\r\n \t});\r\n}\r\n\r\nprivate List<String> mapNames(List<Guest> guests) {\r\n\tList<String> names = new ArrayList<>();\r\n\tfor(Guest guest : guests ) {\r\n\t\tnames.add(guest.getName());\r\n\t}\r\n\treturn names;\r\n}\r\n```\r\n\r\n### [Guava](https://github.com/google/guava)\r\n[GuavaResort.java](src/main/java/com/naver/helloworld/resort/service/GuavaResort.java)\r\n\r\n```java\r\npublic List<String> findGuestNamesByCompany(final String company) {\r\n\tList<Guest> all = repository.findAll();\r\n\r\n\tList<Guest> sorted = FluentIterable.from(all)\r\n\t\t.filter(new Predicate<Guest>() {\r\n\t\t\tpublic boolean apply(Guest g) {\r\n\t\t\t\treturn company.equals(g.getCompany());\r\n\t\t\t}\r\n\t})\r\n\t.toSortedList(Ordering.natural().onResultOf(\r\n\t\tnew Function<Guest, Integer>() {\r\n\t\t\tpublic Integer apply(Guest g) {\r\n\t\t\t\treturn g.getGrade();\r\n\t\t}\r\n\t}));\r\n\r\n\treturn FluentIterable.from(sorted)\r\n\t\t\t.transform(new Function<Guest, String>() {\r\n\t\t\t\tpublic String apply(Guest g) {\r\n\t\t\t\t\treturn g.getName();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.toList();\r\n}\r\n```\r\n\r\n### [Totally Lazy](http://totallylazy.com/)\r\n[TotallyLazyResort.java](src/main/java/com/naver/helloworld/resort/service/TotallyLazyResort.java)\r\n\r\n```java\r\npublic List<String> findGuestNamesByCompany(final String company) {\r\n\tList<Guest> all = repository.findAll();\r\n\treturn Sequences.sequence(all)\r\n\t\t.filter(new Predicate<Guest>() {\r\n\t\t\tpublic boolean matches(Guest g) {\r\n\t\t\t\treturn company.equals(g.getCompany());\r\n\t\t\t}\r\n\t\t})\r\n\t\t.sortBy(new Callable1<Guest, Integer>(){\r\n\t\t\tpublic Integer call(Guest g) {\r\n\t\t\t\treturn g.getGrade();\r\n\t\t\t}\r\n\t\t})\r\n\t\t.map(new Callable1<Guest, String>(){\r\n\t\t\tpublic String call(Guest g) {\r\n\t\t\t\treturn g.getName();\r\n\t\t\t}\r\n\t\t})\r\n\t\t.toList();\r\n}\r\n```\r\n\r\n### [GS Collections](https://github.com/goldmansachs/gs-collections)\r\n[GsCollectoinsResort.java](src/main/java/com/naver/helloworld/resort/service/GsCollectionsResort.java)\r\n\r\n```java\r\npublic List<String> findGuestNamesByCompany(final String company) {\r\n\tList<Guest> all = repository.findAll();\r\n\treturn FastList.newList(all)\r\n\t\t.select(new Predicate<Guest>() {\r\n\t\t\tpublic boolean accept(Guest g) {\r\n\t\t\t\treturn company.equals(g.getCompany());\r\n\t\t\t}\r\n\t\t})\r\n\t\t.sortThisBy(new Function<Guest, Integer>() {\r\n\t\t\tpublic Integer valueOf(Guest g) {\r\n\t\t\t\treturn g.getGrade();\r\n\t\t\t}\r\n\t\t})\r\n\t\t.collect(new Function<Guest, String> () {\r\n\t\t\tpublic String valueOf(Guest g) {\r\n\t\t\t\treturn g.getName();\r\n\t\t\t}\r\n\t\t});\r\n}\r\n```\r\n\r\n### [Bolts](https://bitbucket.org/stepancheg/bolts/wiki/Home)\r\n[BoltsResort.java](src/main/java/com/naver/helloworld/resort/service/BoltsResort.java)\r\n\r\n```java\r\n\tpublic List<String> findGuestNamesByCompany(final String company) {\r\n\t\tList<Guest> all = repository.findAllGuest();\r\n\t\treturn Cf.list(all)\r\n\t\t\t.filter(new Function1B<Guest>() {\r\n\t\t\t\tpublic boolean apply(Guest g) {\r\n\t\t\t\t\treturn company.equals(g.getCompany());\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.sortBy(new Function<Guest, Integer>() {\r\n\t\t\t\tpublic Integer apply(Guest g) {\r\n\t\t\t\t\treturn g.getGrade();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.map(new Function<Guest, String>() {\r\n\t\t\t\tpublic String apply(Guest g) {\r\n\t\t\t\t\treturn g.getName();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n```\r\n\r\n### [Op4j](www.op4j.org)\r\n[Op4JResort.java](src/main/java/com/naver/helloworld/resort/service/Op4JResort.java)\r\n\r\n```java\r\npublic List<String> findGuestNamesByCompany(final String company) {\r\n\tList<Guest> all = repository.findAllGuest();\r\n\treturn Op.on(all)\r\n\t\t.removeAllFalse(new IFunction<Guest, Boolean>() {\r\n\t\t\tpublic Boolean execute(Guest g, ExecCtx ctx) throws Exception {\r\n\t\t\t\treturn company.equals(g.getCompany());\r\n\t\t\t}\r\n\t\t})\r\n\t\t.sortBy(new IFunction<Guest, Integer>() {\r\n\t\t\tpublic Integer execute(Guest g, ExecCtx ctx) throws Exception {\r\n\t\t\t\treturn g.getGrade();\r\n\t\t\t}\r\n\t\t})\r\n\t\t.map(new IFunction<Guest, String>() {\r\n\t\t\tpublic String execute(Guest g, ExecCtx ctx) throws Exception {\r\n\t\t\t\treturn g.getName();\r\n\t\t\t}\r\n\t\t}).get();\r\n}\r\n```\r\n\r\n### [Lambdaj](https://code.google.com/p/lambdaj)\r\n[LambdaJResort.java](src/main/java/com/naver/helloworld/resort/service/LambdaJResort.java)\r\n\r\n```java\r\nimport static ch.lambdaj.Lambda.*;\r\nimport static org.hamcrest.Matchers.*;\r\n...\r\n\r\npublic List<String> findGuestNamesByCompany(final String company) {\r\n\tList<Guest> all = repository.findAll();\r\n\treturn LambdaCollections.with(all)\r\n\t\t.retain(having(on(Guest.class).getCompany(), equalTo(company)))\r\n\t\t.sort(on(Guest.class).getGrade())\r\n\t\t.extract(on(Guest.class).getName());\r\n}\r\n```\r\n\r\n### [Functional Java](http://functionaljava.org/)\r\n[FunctionalJavaResort.java](src/main/java/com/naver/helloworld/resort/service/FunctionalJavaResort.java)\r\n\r\n```java\r\npublic List<String> findGuestNamesByCompany(String company) {\r\n\tList<Guest> all = repository.findAll();\r\n\r\n\tCollection<String> mapped = Stream.iterableStream(all)\r\n\t\t.filter(new F<Guest, Boolean>() {\r\n\t\t\tpublic Boolean f(Guest g){\r\n\t\t\t\treturn company.equals(g.getCompany());\r\n\t\t\t}\r\n\t\t})\r\n\t\t.sort(Ord.ord(\r\n\t\t\tnew F<Guest, F<Guest, Ordering>>() {\r\n\t\t\t\tpublic F<Guest, Ordering> f(final Guest a1) {\r\n\t\t\t\t\treturn new F<Guest, Ordering>() {\r\n\t\t\t\t\t\tpublic Ordering f(final Guest a2) {\r\n\t\t\t\t\t\t\tint x =  Integer.compare(a1.getGrade(), a2.getGrade());\r\n\t\t\t\t\t\t\treturn x < 0 ? Ordering.LT : x == 0 ? Ordering.EQ : Ordering.GT;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}))\r\n\t\t.map(new F<Guest, String>() {\r\n\t\t\tpublic String f(Guest g) {\r\n\t\t\t\treturn g.getName();\r\n\t\t\t}\r\n\t\t})\r\n\t\t.toCollection();\r\n\treturn new ArrayList<String>(mapped);\r\n}\r\n```\r\n\r\n### [Apache Commons Collections](http://commons.apache.org/proper/commons-collections/)\r\n[CommonsCollectionsResort.java](src/main/java/com/naver/helloworld/resort/service/CommonsCollectionsResort.java)\r\n\r\n```java\r\npublic List<String> findGuestNamesByCompany(final String company) {\r\n\tList<Guest> all = repository.findAll();\r\n\tList<Guest> filtered = ListUtils.select(all, new Predicate<Guest>() {\r\n\t\tpublic boolean evaluate(Guest g) {\r\n\t\t\treturn company.equals(g.getCompany());\r\n\t\t}\r\n\t});\r\n\tCollections.sort(filtered, new Comparator<Guest>() {\r\n\t\tpublic int compare(Guest o1, Guest o2) {\r\n\t\t\treturn Integer.compare(o1.getGrade(), o2.getGrade());\r\n\t\t}\r\n\t});\r\n\tCollection<String> names = CollectionUtils.collect(filtered, new Transformer<Guest, String>(){\r\n\t\tpublic String transform(Guest g) {\r\n\t\t\treturn g.getName();\r\n\t\t}\r\n\t});\r\n\treturn new ArrayList<>(names);\r\n}\r\n```\r\n\r\n### [Jedi](http://jedi.codehaus.org/)\r\n[JediResort.java](src/main/java/com/naver/helloworld/resort/service/JediResort.java)\r\n\r\n```java\r\npublic List<String> findGuestNamesByCompany(final String company) {\r\n\tList<Guest> all = repository.findAll();\r\n\tList<Guest> filtered = FunctionalPrimitives.select(all, new Filter<Guest>() {\r\n\t\tpublic Boolean execute(Guest g) {\r\n\t\t\treturn company.equals(g.getCompany());\r\n\t\t}\r\n\t});\r\n\tList<Guest> sorted = Comparables.sort(filtered, new Functor<Guest, Integer>() {\r\n\t\tpublic Integer execute(Guest g) {\r\n\t\t\treturn g.getGrade();\r\n\t\t}\r\n\t});\r\n\treturn FunctionalPrimitives.map(sorted, new Functor<Guest, String>() {\r\n\t\tpublic String execute(Guest g) {\r\n\t\t\treturn g.getName();\r\n\t\t}\r\n\t});\r\n}\r\n```\r\n\r\n## Implementations by other JVM languages\r\n- Groovy : 2.3.9\r\n- Scala :  2.11.4\r\n- Kotlin : 0.10.195\r\n- Xtend : 2.7\r\n- Ceylon : 1.1.0\r\n\r\n### [Groovy](http://groovy.codehaus.org/)\r\n[GroovyAdvancedResort.groovy](src/main/groovy/com/naver/helloworld/resort/service/GroovyAdvancedResort.groovy)\r\n\r\n```groovy\r\nList<String> findGuestNamesByCompany(String company) {\r\n\tList<Guest> all = repository.findAll()\r\n\tall.findAll { it.company == company }\r\n\t\t.sort { it.grade }\r\n\t\t.collect { it.name }\r\n}\r\n```\r\n\r\n### [Scala](http://www.scala-lang.org/)\r\n[ScalaAdvancedResort.scala](src/main/scala/com/naver/helloworld/resort/service/ScalaAdvancedResort.scala)\r\n\r\n```scala\r\nimport scala.collection.JavaConversions._\r\n...\r\n\r\n\tdef findGuestNamesByCompany(company: String): java.util.List[String] = {\r\n\t\tval all = repository.findAll\r\n\t\tall.filter ( _.getCompany == company)\r\n\t\t\t.sortBy ( _.getGrade )\r\n\t\t\t.map ( _.getName )\r\n\t}\r\n```\r\n\r\n### [Kotlin](http://kotlinlang.org)\r\n[KotlinAdvancedResort.kt](src/main/kotlin/com/naver/helloworld/resort/service/KotlinAdvancedResort.kt)\r\n\r\n```kotlin\r\n\r\n\toverride fun findGuestNamesByCompany(company: String): List<String> {\r\n\t\tval all = repository.findAll()\r\n\t\treturn all.filter { it.getCompany() == company }\r\n\t\t\t.sortBy { it.getGrade() }\r\n\t\t\t.map { it.getName() }\r\n\t}\r\n```\r\n\r\n### [Xtend](http://www.eclipse.org/xtend/)\r\n[XtendAdvancedResort.xtend](src/main/xtend/com/naver/helloworld/resort/service/XtendAdvancedResort.xtend)\r\n\r\n```xtend\r\noverride findGuestNamesByCompany(String aCompany) {\r\n\tval all = repository.findAll()\r\n\tall.filter [company == aCompany]\r\n\t\t.sortBy[grade]\r\n\t\t.map[name]\r\n}\r\n```\r\n\r\n### [Ceylon](http://ceylon-lang.org/)\r\n[resort.ceylon](src/main/ceylon/com/naver/helloworld/resort/service/resort.ceylon)\r\n\r\n```ceylon\r\nimport ceylon.interop.java { CeylonIterable }\r\nimport java.util {JList = List, JArrayList = ArrayList }\r\nimport java.lang {JString = String}\r\n\r\n...\r\n\r\n\tshared actual JList<JString> findGuestNamesByCompany(String company) {\r\n\t\tvalue all = repository.findAll() ;\r\n\t\tvalue names = CeylonIterable(all)\r\n\t\t\t.filter((Guest g) => g.company == company)\r\n\t\t\t.sort(byIncreasing((Guest g) => g.grade.intValue()))\r\n\t\t\t.map((Guest g) => g.name);\r\n\r\n\t\tvalue jnames = JArrayList<JString>();\r\n\t\tfor (name in names) {jnames.add(JString(name));}\r\n\t\treturn jnames;\r\n\t}\r\n```\r\n\r\n## Implementations by modern Java\r\n[ModernJavaAdvancedResort.java](src/main/java/com/naver/helloworld/resort/service/ModernJavaAdvancedResort.java)\r\n\r\n```java\r\npublic List<String> findGuestNamesByCompany(String company) {\r\n\tList<Guest> guests = repository.findAll();\r\n\treturn guests.stream()\r\n\t\t.filter(g -> company.equals(g.getCompany()))\r\n\t\t.sorted(Comparator.comparing(Guest::getGrade))\r\n\t\t.map(Guest::getName)\r\n\t\t.collect(Collectors.toList());\r\n}\r\n```\r\n\r\n# Refactoring by lambda expressions\r\n\r\n## Async Servlet\r\n\r\n### Classic Java\r\n[ClassicAsyncServlet.java](src/main/java/com/naver/helloworld/web/ClassicAsyncServlet.java)\r\n\r\n```java\r\npublic void doGet(final HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n\tfinal AsyncContext asyncContext = request.startAsync();\r\n\t\tasyncContext.start(new Runnable() {\r\n\t\tpublic void run() {\r\n\t\t\t// long running job\r\n\t\t\tasyncContext.dispatch(\"/status.jsp\");\r\n\t\t}\r\n\t\t});\r\n}\r\n```\r\n\r\n### Modern Java\r\n[ModernAsyncServlet.java](src/main/java/com/naver/helloworld/web/ModernAsyncServlet.java)\r\n\r\n```java\r\npublic void doGet(final HttpServletRequest request,\tHttpServletResponse response) throws ServletException, IOException {\r\n\tAsyncContext asyncContext = request.startAsync();\r\n\tasyncContext.start(() -> {\r\n\t\t// long running job\r\n\t\tasyncContext.dispatch(\"/status.jsp\");\r\n\t\t});\r\n}\r\n```\r\n\r\n## Spring JDBC\r\n### Classic Java\r\n[ClassicJdbcRepository.java](src/main/java/com/naver/helloworld/resort/repository/ClassicJdbcRepository.java)\r\n\r\n```java\r\npublic List<Guest> findAll() {\r\n\treturn jdbcTemplate.query(SELECT_ALL, new RowMapper<Guest>(){\r\n\t\tpublic Guest mapRow(ResultSet rs, int rowNum) throws SQLException {\r\n\t\t\treturn  new Guest (\r\n\t\t\t\trs.getInt(\"id\"),\r\n\t\t\t\trs.getString(\"name\"),\r\n\t\t\t\trs.getString(\"company\"),\r\n\t\t\t\trs.getInt(\"grade\")\r\n\t\t\t);\r\n\t}\r\n  });\r\n}\r\n```\r\n\r\n### Modern Java\r\n[ModernJdbcRepository.java](src/main/java/com/naver/helloworld/resort/repository/ModernJdbcRepository.java)\r\n\r\n```java\r\npublic List<Guest> findAll() {\r\n\treturn jdbcTemplate.query(SELECT_ALL,\r\n\t\t(rs, rowNum) ->new Guest (\r\n\t\t\trs.getInt(\"id\"),\r\n\t\t\trs.getString(\"name\"),\r\n\t\t\trs.getString(\"company\"),\r\n\t\t\trs.getInt(\"grade\")\r\n\t\t\t)\r\n  );\r\n}\r\n```\r\n\r\n### Event bindings in Android\r\n### Classic Java\r\n[ClassicFragment.java](src/main/java/com/naver/helloworld/resort/android/ClassicFragment.java)\r\n\r\n```java\r\nButton calcButton = (Button) view.findViewById(R.id.calcBtn);\r\nButton sendButton = (Button) view.findViewById(R.id.sendBtn);\r\n\r\ncalcButton.setOnClickListener(new OnClickListener() {\r\n\tpublic void onClick(View view) {\r\n\t\tcalculate();\r\n\t}\r\n});\r\nsendButton.setOnClickListener(new OnClickListener() {\r\n\tpublic void onClick(View view) {\r\n\t\tsend();\r\n\t}\r\n});\r\n```\r\n\r\n### Modern Java\r\n[ModernFragment.java](src/main/java/com/naver/helloworld/web/ModernAsyncServlet.java)\r\n\r\n```java\r\nButton calcButton = (Button) view.findViewById(R.id.calcBtn);\r\nButton sendButton = (Button) view.findViewById(R.id.sendBtn);\r\n\r\ncalcButton.setOnClickListener(v -> calculate());\r\nsendButton.setOnClickListener(v -> send());\r\n```\r\n\r\n# Frameworks using lambda expressions\r\n### [Lambda Behave](http://richardwarburton.github.io/lambda-behave/)\r\n[ResortServiceSpec.java](src/test/java/com/naver/helloworld/resort/service/ResortServiceSpec.java)\r\n\r\n```java\r\n@RunWith(JunitSuiteRunner.class)\r\npublic class ResortServiceSpec {{\r\n\tGuestRepository repository = new MemoryRepository();\r\n\tResortService service = new ModernJavaResort(repository);\r\n\r\n\tdescribe(\"ResortService with modern Java\", it -> {\r\n\t\tit.isSetupWith(() -> {\r\n\t\t\trepository.save(\r\n\t\t\t\t\tnew Guest(1, \"jsh\", \"Naver\", 15),\r\n\t\t\t\t\tnew Guest(2, \"hny\", \"Line\", 10),\r\n\t\t\t\t\tnew Guest(3, \"chy\", \"Naver\", 5)\r\n\t\t\t\t);\r\n\r\n\t\t});\r\n\t\tit.isConcludedWith(repository::deleteAll);\r\n\r\n\t\tit.should(\"find names of guests by company \", expect -> {\r\n\t\t\tList<String> names = service.findGuestNamesByCompany(\"Naver\");\r\n\t\t\texpect.that(names).isEqualTo(Arrays.asList(\"chy\",\"jsh\"));\r\n\t\t});\r\n\t});\r\n}}\r\n```\r\n\r\n### [Jinq](http://www.jinq.org/)\r\n[JinqResort.java](src/main/java/com/naver/helloworld/resort/service/JinqResort.java)\r\n\r\n```java\r\nprivate EntityManager em;\r\n@Autowired\r\npublic JinqResort(EntityManager em) {\r\n\tthis.em = em;\r\n}\r\nprivate <T> JinqStream<T> stream(Class<T> clazz) {\r\n\treturn new JinqJPAStreamProvider(em.getEntityManagerFactory()).streamAll(em, clazz);\r\n}\r\n\r\npublic List<String> findGuestNamesByCompany(String company) {\r\n\treturn stream(Guest.class)\r\n\t\t.where(g -> g.getCompany().equals(company))\r\n\t\t.sortedBy(Guest::getGrade)\r\n\t\t.select(Guest::getName)\r\n\t\t.toList();\r\n}\r\n```\r\n\r\nA query generated by JinqResort\r\n\r\n```sql\r\n\tHibernate: select guest0_.id as id1_0_, guest0_.company as company2_0_, guest0_.grade as grade3_0_, guest0_.name as name4_0_ from guest guest0_ where guest0_.company=? order by guest0_.grade ASC limit ?\r\n```\r\n\r\n### [Spark](http://www.sparkjava.com/)\r\n[SparkServer.java](src/main/java/com/naver/helloworld/web/SparkServer.java)\r\n\r\n```java\r\nimport static spark.Spark.*;\r\n\r\nimport com.naver.helloworld.resort.service.ResortService;\r\n\r\npublic class SparkServer {\r\n\tpublic static void main(String[] args) {\r\n\t\tget(\"/guests/:company\", (request, response) -> {\r\n\t\t\tString company = request.params(\":company\");\r\n\t\t\treturn \"No guests from \" + company;\r\n\t\t});\r\n\t}\r\n}\r\n```\r\n\r\n[ResortServer.java](src/main/java/com/naver/helloworld/resort/ResortServer.java) (Spark + Spring)\r\n\r\n```java\r\n@SpringBootApplication\r\npublic class ResortServer {\r\n\t@Autowired\r\n\tprivate ResortService service;\r\n\r\n\tpublic void start() {\r\n\t\tget(\"/guests/:company\", (request, response) -> {\r\n\t\t\tString company = request.params(\":company\");\r\n\t\t\tList<String> names = service.findGuestNamesByCompany(company);\r\n\t\t\treturn \"Guests from \" + company + \" : \" + names;\r\n\t\t});\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tApplicationContext context = SpringApplication.run(ResortServer.class);\r\n\t\tcontext.getBean(ResortServer.class).start();\r\n\t}\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}